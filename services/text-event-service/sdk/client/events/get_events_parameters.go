// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEventsParams creates a new GetEventsParams object
// with the default values initialized.
func NewGetEventsParams() *GetEventsParams {
	var ()
	return &GetEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsParamsWithTimeout creates a new GetEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEventsParamsWithTimeout(timeout time.Duration) *GetEventsParams {
	var ()
	return &GetEventsParams{

		timeout: timeout,
	}
}

// NewGetEventsParamsWithContext creates a new GetEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEventsParamsWithContext(ctx context.Context) *GetEventsParams {
	var ()
	return &GetEventsParams{

		Context: ctx,
	}
}

// NewGetEventsParamsWithHTTPClient creates a new GetEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEventsParamsWithHTTPClient(client *http.Client) *GetEventsParams {
	var ()
	return &GetEventsParams{
		HTTPClient: client,
	}
}

/*GetEventsParams contains all the parameters to send to the API endpoint
for the get events operation typically these are written to a http.Request
*/
type GetEventsParams struct {

	/*Category
	  The string which has to match exact searched event category

	*/
	Category *string
	/*Content
	  The string which has to be included (not exact match) in searched event content

	*/
	Content *string
	/*DayStart
	  The start date of seached event in format YYYY-MM-DD

	*/
	DayStart *strfmt.DateTime
	/*DayStop
	  The end date of seached event in format YYYY-MM-DD

	*/
	DayStop *strfmt.DateTime
	/*Limit
	  The number of items to return.

	*/
	Limit *int64
	/*Offset
	  The number of items to skip before starting to collect the result set.

	*/
	Offset *int64
	/*Owner
	  The string which has to match exact searched event owner

	*/
	Owner *string
	/*Title
	  The string which has to be included (not exact match) in searched event title

	*/
	Title *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get events params
func (o *GetEventsParams) WithTimeout(timeout time.Duration) *GetEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events params
func (o *GetEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events params
func (o *GetEventsParams) WithContext(ctx context.Context) *GetEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events params
func (o *GetEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events params
func (o *GetEventsParams) WithHTTPClient(client *http.Client) *GetEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events params
func (o *GetEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get events params
func (o *GetEventsParams) WithCategory(category *string) *GetEventsParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get events params
func (o *GetEventsParams) SetCategory(category *string) {
	o.Category = category
}

// WithContent adds the content to the get events params
func (o *GetEventsParams) WithContent(content *string) *GetEventsParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the get events params
func (o *GetEventsParams) SetContent(content *string) {
	o.Content = content
}

// WithDayStart adds the dayStart to the get events params
func (o *GetEventsParams) WithDayStart(dayStart *strfmt.DateTime) *GetEventsParams {
	o.SetDayStart(dayStart)
	return o
}

// SetDayStart adds the dayStart to the get events params
func (o *GetEventsParams) SetDayStart(dayStart *strfmt.DateTime) {
	o.DayStart = dayStart
}

// WithDayStop adds the dayStop to the get events params
func (o *GetEventsParams) WithDayStop(dayStop *strfmt.DateTime) *GetEventsParams {
	o.SetDayStop(dayStop)
	return o
}

// SetDayStop adds the dayStop to the get events params
func (o *GetEventsParams) SetDayStop(dayStop *strfmt.DateTime) {
	o.DayStop = dayStop
}

// WithLimit adds the limit to the get events params
func (o *GetEventsParams) WithLimit(limit *int64) *GetEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get events params
func (o *GetEventsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get events params
func (o *GetEventsParams) WithOffset(offset *int64) *GetEventsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get events params
func (o *GetEventsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwner adds the owner to the get events params
func (o *GetEventsParams) WithOwner(owner *string) *GetEventsParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the get events params
func (o *GetEventsParams) SetOwner(owner *string) {
	o.Owner = owner
}

// WithTitle adds the title to the get events params
func (o *GetEventsParams) WithTitle(title *string) *GetEventsParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the get events params
func (o *GetEventsParams) SetTitle(title *string) {
	o.Title = title
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.Content != nil {

		// query param content
		var qrContent string
		if o.Content != nil {
			qrContent = *o.Content
		}
		qContent := qrContent
		if qContent != "" {
			if err := r.SetQueryParam("content", qContent); err != nil {
				return err
			}
		}

	}

	if o.DayStart != nil {

		// query param dayStart
		var qrDayStart strfmt.DateTime
		if o.DayStart != nil {
			qrDayStart = *o.DayStart
		}
		qDayStart := qrDayStart.String()
		if qDayStart != "" {
			if err := r.SetQueryParam("dayStart", qDayStart); err != nil {
				return err
			}
		}

	}

	if o.DayStop != nil {

		// query param dayStop
		var qrDayStop strfmt.DateTime
		if o.DayStop != nil {
			qrDayStop = *o.DayStop
		}
		qDayStop := qrDayStop.String()
		if qDayStop != "" {
			if err := r.SetQueryParam("dayStop", qDayStop); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Owner != nil {

		// query param owner
		var qrOwner string
		if o.Owner != nil {
			qrOwner = *o.Owner
		}
		qOwner := qrOwner
		if qOwner != "" {
			if err := r.SetQueryParam("owner", qOwner); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
