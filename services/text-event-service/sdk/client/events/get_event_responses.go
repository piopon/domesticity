// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/piopon/domesticity/services/text-event-service/sdk/models"
)

// GetEventReader is a Reader for the GetEvent structure.
type GetEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEventOK creates a GetEventOK with default headers values
func NewGetEventOK() *GetEventOK {
	return &GetEventOK{}
}

/*GetEventOK handles this case with default header values.

Response with single event from DB (selected by ID parameter in path param)
*/
type GetEventOK struct {
	Payload *models.Event
}

func (o *GetEventOK) Error() string {
	return fmt.Sprintf("[GET /event/{id}][%d] getEventOK  %+v", 200, o.Payload)
}

func (o *GetEventOK) GetPayload() *models.Event {
	return o.Payload
}

func (o *GetEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Event)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventNotFound creates a GetEventNotFound with default headers values
func NewGetEventNotFound() *GetEventNotFound {
	return &GetEventNotFound{}
}

/*GetEventNotFound handles this case with default header values.

Error with JSON message returned in body when desired item is not found
*/
type GetEventNotFound struct {
	Payload *models.GenericError
}

func (o *GetEventNotFound) Error() string {
	return fmt.Sprintf("[GET /event/{id}][%d] getEventNotFound  %+v", 404, o.Payload)
}

func (o *GetEventNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *GetEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventInternalServerError creates a GetEventInternalServerError with default headers values
func NewGetEventInternalServerError() *GetEventInternalServerError {
	return &GetEventInternalServerError{}
}

/*GetEventInternalServerError handles this case with default header values.

Error with JSON message returned in body when internal server error occurs
*/
type GetEventInternalServerError struct {
	Payload *models.GenericError
}

func (o *GetEventInternalServerError) Error() string {
	return fmt.Sprintf("[GET /event/{id}][%d] getEventInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEventInternalServerError) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *GetEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
