// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSpan TimeSpan is an struct representing event start and end time
//
// swagger:model TimeSpan
type TimeSpan struct {

	// The event start time in RFC3339 standard ("2006-01-02T15:04:05Z07:00")
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"start"`

	// The event stop time in RFC3339 standard ("2006-01-02T15:04:05Z07:00")
	// Required: true
	// Format: date-time
	Stop *strfmt.DateTime `json:"stop"`
}

// Validate validates this time span
func (m *TimeSpan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStop(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSpan) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TimeSpan) validateStop(formats strfmt.Registry) error {

	if err := validate.Required("stop", "body", m.Stop); err != nil {
		return err
	}

	if err := validate.FormatOf("stop", "body", "date-time", m.Stop.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeSpan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSpan) UnmarshalBinary(b []byte) error {
	var res TimeSpan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
